{"version":3,"sources":["ReduxHandling/Reducers/counterAndApiSlice.jsx","ReduxHandling/Store/store.jsx","Components/IteratingApi.jsx","Components/CounterAndApi.jsx","App.jsx","index.jsx"],"names":["fetchApi","createAsyncThunk","data","thunkApi","a","fetch","response","json","counterAndApiSlice","createSlice","name","initialState","counter","fetchedApiValues","reducers","increment","state","decrement","reset","extraReducers","fulfilled","action","payload","console","log","rejected","pending","actions","store","configureStore","reducer","counterAndApiSliceReducer","IteratingApi","fetchStates","useSelector","FetchedData","length","map","value","index","key","interestId","interestName","interestSubCategoryId","interestSubCategoryName","CounterAndApi","fetchApiBtn","dispatch","useDispatch","Counter","onClick","className","App","ReactDOM","render","document","getElementById"],"mappings":"4QAEMA,EAAWC,YACf,2BAD+B,uCAE/B,WAAOC,EAAMC,GAAb,eAAAC,EAAA,sEACyBC,MACrB,+EAFJ,cACQC,EADR,gBAIeA,EAASC,OAJxB,mFAF+B,yDAU3BC,EAAqBC,YAAY,CACrCC,KAAM,qBACNC,aAAc,CACZC,QAAS,EACTC,iBAAkB,GAEpBC,SAAU,CACRC,UAAW,SAACC,GACVA,EAAMJ,QAAUI,EAAMJ,QAAU,GAElCK,UAAW,SAACD,GACVA,EAAMJ,QAAUI,EAAMJ,QAAU,GAElCM,MAAO,SAACF,GACNA,EAAMJ,QAAU,IAGpBO,eAAa,mBACVnB,EAASoB,WAAY,SAACJ,EAAOK,GAC5BL,EAAMH,iBAAmBQ,EAAOC,QAAQpB,KACxCqB,QAAQC,IAAIR,EAAMH,qBAHT,cAKVb,EAASyB,UAAW,SAACT,EAAOK,GAC3BE,QAAQC,IAAI,yBANH,cAQVxB,EAAS0B,SAAU,SAACV,EAAOK,GAC1BE,QAAQC,IAAI,oCATH,KAcAhB,IAAf,Q,EAC+CA,EAAmBmB,QAAnDZ,E,EAAAA,UAAWE,E,EAAAA,UAAWC,E,EAAAA,MCnCtBU,EANDC,YAAe,CAC3BC,QAAS,CACP9B,SAAU+B,KCyCCC,EA3CM,WACnB,IAAMC,EAAcC,aAAY,SAAClB,GAC/B,MAAO,CACLmB,YAAanB,EAAMhB,SAASa,qBAGhC,OACE,kBAAC,WAAD,KACE,6BACE,gDACA,+BACE,+BACE,4BACE,6CACA,+CACA,0DACA,8DAGJ,+BACGoB,EAAYE,YAAYC,OAAS,EAChCH,EAAYE,YAAYE,KAAI,SAACC,EAAOC,GAClC,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAMG,YACX,4BAAKH,EAAMI,cACX,4BAAKJ,EAAMK,uBACX,4BAAKL,EAAMM,6BAKjB,4BACE,wDC8CDC,EAxEO,WACpB,IAOIC,EAPEC,EAAWC,cACXf,EAAcC,aAAY,SAAClB,GAC/B,MAAO,CACLiC,QAASjC,EAAMhB,SAASY,QACxBuB,YAAanB,EAAMhB,SAASa,qBAShC,OAJEiC,EADEb,EAAYE,YAAYC,OAAS,EACrB,WAEA,WAGd,kBAAC,WAAD,KACE,6BACE,6BACE,sDAEF,6BACE,8BAEF,6BACE,8CAAoBH,EAAYgB,SAChC,4BACEC,QAAS,WACPH,EAAShC,OAFb,aAOA,4BACEmC,QAAS,WACPH,EAAS9B,OAFb,aAOA,4BACEiC,QAAS,WACPH,EAAS7B,OAFb,UAQF,6BACE,8BAEF,6BACE,yCACA,4BACEgC,QAAS,WACPH,EAAS/C,MAEXmD,UAAWL,GAJb,cASF,6BACE,8BAEF,6BACE,kBAAC,EAAD,UC9DKM,EAVH,WACV,OACE,kBAAC,WAAD,KACE,6BACE,kBAAC,EAAD,S,MCARC,IAASC,OACP,kBAAC,IAAD,CAAU1B,MAAOA,GACf,kBAAC,WAAD,KACE,kBAAC,EAAD,QAGJ2B,SAASC,eAAe,W","file":"static/js/main.acba18b7.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nconst fetchApi = createAsyncThunk(\r\n  \"fetching/toneNetworksApi\",\r\n  async (data, thunkApi) => {\r\n    const response = await fetch(\r\n      \"https://api1.dev-tonenetworks.com/v1/interests/getSubCategoriesByTitle/WORK\"\r\n    );\r\n    return await response.json();\r\n  }\r\n);\r\n\r\nconst counterAndApiSlice = createSlice({\r\n  name: \"counterAndApiSlice\",\r\n  initialState: {\r\n    counter: 0,\r\n    fetchedApiValues: 0,\r\n  },\r\n  reducers: {\r\n    increment: (state) => {\r\n      state.counter = state.counter + 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.counter = state.counter - 1;\r\n    },\r\n    reset: (state) => {\r\n      state.counter = 0;\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [fetchApi.fulfilled]: (state, action) => {\r\n      state.fetchedApiValues = action.payload.data;\r\n      console.log(state.fetchedApiValues);\r\n    },\r\n    [fetchApi.rejected]: (state, action) => {\r\n      console.log(\"API Call Rejected!\");\r\n    },\r\n    [fetchApi.pending]: (state, action) => {\r\n      console.log(\"API Call Request In Progress!\");\r\n    },\r\n  },\r\n});\r\n\r\nexport default counterAndApiSlice.reducer;\r\nexport const { increment, decrement, reset } = counterAndApiSlice.actions;\r\nexport { fetchApi };\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport counterAndApiSliceReducer from \"../Reducers/counterAndApiSlice\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    fetchApi: counterAndApiSliceReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React, { Fragment } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst IteratingApi = () => {\r\n  const fetchStates = useSelector((state) => {\r\n    return {\r\n      FetchedData: state.fetchApi.fetchedApiValues,\r\n    };\r\n  });\r\n  return (\r\n    <Fragment>\r\n      <div>\r\n        <h1>Fetched API Data</h1>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Interest Id |</th>\r\n              <th>Interest Name |</th>\r\n              <th>Interest Sub Category Id |</th>\r\n              <th>Interest Sub Category Name |</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {fetchStates.FetchedData.length > 0 ? (\r\n              fetchStates.FetchedData.map((value, index) => {\r\n                return (\r\n                  <tr key={index}>\r\n                    <td>{value.interestId}</td>\r\n                    <td>{value.interestName}</td>\r\n                    <td>{value.interestSubCategoryId}</td>\r\n                    <td>{value.interestSubCategoryName}</td>\r\n                  </tr>\r\n                );\r\n              })\r\n            ) : (\r\n              <tr>\r\n                <td>No Data Available!</td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default IteratingApi;\r\n","import React, { Fragment } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  increment,\r\n  decrement,\r\n  reset,\r\n} from \"../ReduxHandling/Reducers/counterAndApiSlice\";\r\nimport { fetchApi } from \"../ReduxHandling/Reducers/counterAndApiSlice\";\r\nimport IteratingApi from \"./IteratingApi\";\r\n\r\nconst CounterAndApi = () => {\r\n  const dispatch = useDispatch();\r\n  const fetchStates = useSelector((state) => {\r\n    return {\r\n      Counter: state.fetchApi.counter,\r\n      FetchedData: state.fetchApi.fetchedApiValues,\r\n    };\r\n  });\r\n  let fetchApiBtn;\r\n  if (fetchStates.FetchedData.length > 0) {\r\n    fetchApiBtn = \"blockBtn\";\r\n  } else {\r\n    fetchApiBtn = \"allowBtn\";\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <div>\r\n        <div>\r\n          <h1>Counter And Fetch API</h1>\r\n        </div>\r\n        <div>\r\n          <hr></hr>\r\n        </div>\r\n        <div>\r\n          <h1>Counter Value: {fetchStates.Counter}</h1>\r\n          <button\r\n            onClick={() => {\r\n              dispatch(increment());\r\n            }}\r\n          >\r\n            Increment\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              dispatch(decrement());\r\n            }}\r\n          >\r\n            Decrement\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              dispatch(reset());\r\n            }}\r\n          >\r\n            Reset\r\n          </button>\r\n        </div>\r\n        <div>\r\n          <hr></hr>\r\n        </div>\r\n        <div>\r\n          <h1>Fetch API</h1>\r\n          <button\r\n            onClick={() => {\r\n              dispatch(fetchApi());\r\n            }}\r\n            className={fetchApiBtn}\r\n          >\r\n            Fetch API\r\n          </button>\r\n        </div>\r\n        <div>\r\n          <hr></hr>\r\n        </div>\r\n        <div>\r\n          <IteratingApi />\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default CounterAndApi;\r\n","import React, { Fragment } from \"react\";\r\nimport CounterAndApi from \"./Components/CounterAndApi\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Fragment>\r\n      <div>\r\n        <CounterAndApi />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React, { Fragment } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./ReduxHandling/Store/store\";\r\nimport App from \"./App\";\r\nimport \"./Styles/index.css\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Fragment>\r\n      <App />\r\n    </Fragment>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}